{"remainingRequest":"C:\\Users\\noest\\Desktop\\fullstack\\bioblocks\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\noest\\Desktop\\fullstack\\bioblocks\\node_modules\\eslint-loader\\index.js??ref--13-0!C:\\Users\\noest\\Desktop\\fullstack\\bioblocks\\src\\APIService.js","dependencies":[{"path":"C:\\Users\\noest\\Desktop\\fullstack\\bioblocks\\src\\APIService.js","mtime":1555783715966},{"path":"C:\\Users\\noest\\Desktop\\fullstack\\bioblocks\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\noest\\Desktop\\fullstack\\bioblocks\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\Users\\noest\\Desktop\\fullstack\\bioblocks\\node_modules\\eslint-loader\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import _classCallCheck from \"C:\\\\Users\\\\noest\\\\Desktop\\\\fullstack\\\\bioblocks\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\noest\\\\Desktop\\\\fullstack\\\\bioblocks\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/esm/createClass\";\nimport axios from 'axios';\nvar API_URL = 'http://localhost:3000';\nexport var APIService =\n/*#__PURE__*/\nfunction () {\n  function APIService() {\n    _classCallCheck(this, APIService);\n  }\n\n  _createClass(APIService, [{\n    key: \"isLoggedIn\",\n    value: function isLoggedIn() {\n      var url = \"\".concat(API_URL, \"/gets/isLoggedIn\");\n      return axios.get(url, {\n        withCredentials: true\n      });\n    }\n  }, {\n    key: \"logOut\",\n    value: function logOut() {\n      var url = \"\".concat(API_URL, \"/gets/logout\");\n      return axios.get(url, {\n        withCredentials: true\n      });\n    }\n  }, {\n    key: \"MyHomeProjects\",\n    value: function MyHomeProjects() {\n      var url = \"\".concat(API_URL, \"/gets/MyHomeProjects\");\n      return axios.get(url, {\n        withCredentials: true\n      });\n    }\n  }, {\n    key: \"AllMyProjects\",\n    value: function AllMyProjects() {\n      var url = \"\".concat(API_URL, \"/gets/AllMyProjects\");\n      return axios.get(url, {\n        withCredentials: true\n      });\n    }\n  }, {\n    key: \"MyHomeGroups\",\n    value: function MyHomeGroups() {\n      var url = \"\".concat(API_URL, \"/gets/MyHomeGroups\");\n      return axios.get(url, {\n        withCredentials: true\n      });\n    }\n  }, {\n    key: \"AllMyGroups\",\n    value: function AllMyGroups() {\n      var url = \"\".concat(API_URL, \"/gets/AllMyGroups\");\n      return axios.get(url, {\n        withCredentials: true\n      });\n    }\n  }, {\n    key: \"signIn\",\n    value: function signIn(user) {\n      var url = \"\".concat(API_URL, \"/posts/signin\");\n      return axios.post(url, user, {\n        withCredentials: true\n      });\n    }\n  }, {\n    key: \"signUp\",\n    value: function signUp(user) {\n      var url = \"\".concat(API_URL, \"/posts/signup\");\n      return axios.post(url, user, {\n        withCredentials: true\n      });\n    }\n  }, {\n    key: \"newProject\",\n    value: function newProject(user) {\n      var url = \"\".concat(API_URL, \"/posts/newproject\");\n      return axios.post(url, user, {\n        withCredentials: true\n      });\n    }\n  }, {\n    key: \"saveProject\",\n    value: function saveProject(info) {\n      var url = \"\".concat(API_URL, \"/puts/saveproject\");\n      return axios.put(url, info, {\n        withCredentials: true\n      });\n    }\n  }, {\n    key: \"editProject\",\n    value: function editProject(info) {\n      var url = \"\".concat(API_URL, \"/puts/editproject\");\n      return axios.put(url, info, {\n        withCredentials: true\n      });\n    }\n  }, {\n    key: \"deleteProject\",\n    value: function deleteProject(info) {\n      var url = \"\".concat(API_URL, \"/deletes/deleteproject\");\n      return axios.post(url, info, {\n        withCredentials: true\n      });\n    }\n  }, {\n    key: \"addUser\",\n    value: function addUser(info) {\n      var url = \"\".concat(API_URL, \"/posts/userToProject\");\n      return axios.post(url, info, {\n        withCredentials: true\n      });\n    }\n  }, {\n    key: \"newGroup\",\n    value: function newGroup(user) {\n      var url = \"\".concat(API_URL, \"/posts/newgroup\");\n      return axios.post(url, user, {\n        withCredentials: true\n      });\n    }\n  }, {\n    key: \"editGroup\",\n    value: function editGroup(info) {\n      var url = \"\".concat(API_URL, \"/puts/editgroup\");\n      return axios.put(url, info, {\n        withCredentials: true\n      });\n    }\n  }, {\n    key: \"deleteGroup\",\n    value: function deleteGroup(info) {\n      var url = \"\".concat(API_URL, \"/deletes/deletegroup\");\n      return axios.post(url, info, {\n        withCredentials: true\n      });\n    }\n  }, {\n    key: \"getProject\",\n    value: function getProject(id) {\n      var url = \"\".concat(API_URL, \"/gets/project/\") + id;\n      return axios.get(url, {\n        withCredentials: true\n      });\n    }\n  }, {\n    key: \"searchProject\",\n    value: function searchProject(name) {\n      var url = \"\".concat(API_URL, \"/posts/search/projects\");\n      return axios.post(url, name, {\n        withCredentials: true\n      });\n    }\n  }, {\n    key: \"getGroup\",\n    value: function getGroup(id) {\n      var url = \"\".concat(API_URL, \"/gets/group/\") + id;\n      return axios.get(url, {\n        withCredentials: true\n      });\n    }\n  }]);\n\n  return APIService;\n}();\n/*\r\n//const https = require('https')\r\nconst http = require('http')\r\nconst querystring = require('querystring')\r\n\r\nconst gets = {\r\n    hostname: 'localhost',\r\n    port: 8080,\r\n    path: '/gets',\r\n    method: 'GET'\r\n}\r\n\r\nconst posts = {\r\n    hostname: 'localhost',\r\n    port: 8080,\r\n    path: '/posts',\r\n    method: 'POST',\r\n    headers: {\r\n        'Content-Type': 'application/json'\r\n    }\r\n}\r\n\r\nexport class APIService {\r\n\r\n    constructor() { }\r\n\r\n    isLoggedIn() {\r\n        gets.path = '/gets/isLoggedIn'\r\n        return new Promise((resolve, reject) => {\r\n            const req = http.request(gets, (res) => {\r\n                console.log(`statusCode: ${res.statusCode}`)\r\n\r\n                var body = []\r\n                res.on('data', function (chunk) {\r\n                    body.push(chunk);\r\n                })\r\n\r\n                res.on('end', function () {\r\n                    try {\r\n                        body = JSON.parse(Buffer.concat(body).toString())\r\n                    } catch (e) {\r\n                        reject(e);\r\n                    }\r\n                    resolve(body);\r\n                })\r\n            })\r\n\r\n            req.on('error', (error) => {\r\n                console.error(error)\r\n                reject(error)\r\n            })\r\n\r\n            req.end()\r\n        })\r\n    }\r\n\r\n    signIn(user) {\r\n        posts.path = '/posts/signin'\r\n        return new Promise((resolve, reject) => {\r\n            const req = http.request(posts, (res) => {\r\n                console.log(`statusCode: ${res.statusCode}`)\r\n\r\n                var body = []\r\n                res.on('data', function (chunk) {\r\n                    body.push(chunk);\r\n                })\r\n\r\n                res.on('end', function () {\r\n                    try {\r\n                        body = JSON.parse(Buffer.concat(body).toString())\r\n                    } catch (e) {\r\n                        reject(e);\r\n                    }\r\n                    resolve(body);\r\n                })\r\n            })\r\n\r\n            req.on('error', (error) => {\r\n                console.error(error)\r\n                reject(error)\r\n            })\r\n\r\n            if (user) {\r\n                req.write(JSON.stringify(user))\r\n            }\r\n            req.end()\r\n        })\r\n    }\r\n}*/",{"version":3,"sources":["C:\\Users\\noest\\Desktop\\fullstack\\bioblocks\\src\\APIService.js"],"names":["axios","API_URL","APIService","url","get","withCredentials","user","post","info","put","id","name"],"mappings":"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","sourcesContent":["import axios from 'axios';\r\nconst API_URL = 'http://localhost:3000';\r\n\r\nexport class APIService {\r\n\r\n    constructor() { }\r\n\r\n    isLoggedIn() {\r\n        const url = `${API_URL}/gets/isLoggedIn`;\r\n        return axios.get(url, { withCredentials: true });\r\n    }\r\n\r\n    logOut() {\r\n        const url = `${API_URL}/gets/logout`;\r\n        return axios.get(url, { withCredentials: true });\r\n    }\r\n\r\n    MyHomeProjects() {\r\n        const url = `${API_URL}/gets/MyHomeProjects`;\r\n        return axios.get(url, { withCredentials: true });\r\n    }\r\n\r\n    AllMyProjects() {\r\n        const url = `${API_URL}/gets/AllMyProjects`;\r\n        return axios.get(url, { withCredentials: true });\r\n    }\r\n    \r\n    MyHomeGroups() {\r\n        const url = `${API_URL}/gets/MyHomeGroups`;\r\n        return axios.get(url, { withCredentials: true });\r\n    }\r\n\r\n    AllMyGroups() {\r\n        const url = `${API_URL}/gets/AllMyGroups`;\r\n        return axios.get(url, { withCredentials: true });\r\n    }\r\n\r\n    signIn(user) {\r\n        const url = `${API_URL}/posts/signin`;\r\n        return axios.post(url, user, { withCredentials: true });\r\n    }\r\n\r\n    signUp(user) {\r\n        const url = `${API_URL}/posts/signup`;\r\n        return axios.post(url, user, { withCredentials: true });\r\n    }\r\n\r\n    newProject(user) {\r\n        const url = `${API_URL}/posts/newproject`;\r\n        return axios.post(url, user, { withCredentials: true });\r\n    }\r\n\r\n    saveProject(info) {\r\n        const url = `${API_URL}/puts/saveproject`;\r\n        return axios.put(url, info, { withCredentials: true });\r\n    }\r\n\r\n    editProject(info) {\r\n        const url = `${API_URL}/puts/editproject`;\r\n        return axios.put(url, info, { withCredentials: true });\r\n    }\r\n\r\n    deleteProject(info) {\r\n        const url = `${API_URL}/deletes/deleteproject`;\r\n        return axios.post(url, info, { withCredentials: true });\r\n    }\r\n\r\n    addUser(info) {\r\n        const url = `${API_URL}/posts/userToProject`;\r\n        return axios.post(url, info, { withCredentials: true });\r\n    }\r\n\r\n    newGroup(user) {\r\n        const url = `${API_URL}/posts/newgroup`;\r\n        return axios.post(url, user, { withCredentials: true });\r\n    }\r\n\r\n    editGroup(info) {\r\n        const url = `${API_URL}/puts/editgroup`;\r\n        return axios.put(url, info, { withCredentials: true });\r\n    }\r\n\r\n    deleteGroup(info) {\r\n        const url = `${API_URL}/deletes/deletegroup`;\r\n        return axios.post(url, info, { withCredentials: true });\r\n    }\r\n\r\n    getProject(id) {\r\n        const url = `${API_URL}/gets/project/` + id;\r\n        return axios.get(url, { withCredentials: true });\r\n    }\r\n\r\n    searchProject(name) {\r\n        const url = `${API_URL}/posts/search/projects`;\r\n        return axios.post(url, name, { withCredentials: true });\r\n    }\r\n\r\n    getGroup(id) {\r\n        const url = `${API_URL}/gets/group/` + id;\r\n        return axios.get(url, { withCredentials: true });\r\n    }\r\n\r\n}\r\n\r\n\r\n/*\r\n//const https = require('https')\r\nconst http = require('http')\r\nconst querystring = require('querystring')\r\n\r\nconst gets = {\r\n    hostname: 'localhost',\r\n    port: 8080,\r\n    path: '/gets',\r\n    method: 'GET'\r\n}\r\n\r\nconst posts = {\r\n    hostname: 'localhost',\r\n    port: 8080,\r\n    path: '/posts',\r\n    method: 'POST',\r\n    headers: {\r\n        'Content-Type': 'application/json'\r\n    }\r\n}\r\n\r\nexport class APIService {\r\n\r\n    constructor() { }\r\n\r\n    isLoggedIn() {\r\n        gets.path = '/gets/isLoggedIn'\r\n        return new Promise((resolve, reject) => {\r\n            const req = http.request(gets, (res) => {\r\n                console.log(`statusCode: ${res.statusCode}`)\r\n\r\n                var body = []\r\n                res.on('data', function (chunk) {\r\n                    body.push(chunk);\r\n                })\r\n\r\n                res.on('end', function () {\r\n                    try {\r\n                        body = JSON.parse(Buffer.concat(body).toString())\r\n                    } catch (e) {\r\n                        reject(e);\r\n                    }\r\n                    resolve(body);\r\n                })\r\n            })\r\n\r\n            req.on('error', (error) => {\r\n                console.error(error)\r\n                reject(error)\r\n            })\r\n\r\n            req.end()\r\n        })\r\n    }\r\n\r\n    signIn(user) {\r\n        posts.path = '/posts/signin'\r\n        return new Promise((resolve, reject) => {\r\n            const req = http.request(posts, (res) => {\r\n                console.log(`statusCode: ${res.statusCode}`)\r\n\r\n                var body = []\r\n                res.on('data', function (chunk) {\r\n                    body.push(chunk);\r\n                })\r\n\r\n                res.on('end', function () {\r\n                    try {\r\n                        body = JSON.parse(Buffer.concat(body).toString())\r\n                    } catch (e) {\r\n                        reject(e);\r\n                    }\r\n                    resolve(body);\r\n                })\r\n            })\r\n\r\n            req.on('error', (error) => {\r\n                console.error(error)\r\n                reject(error)\r\n            })\r\n\r\n            if (user) {\r\n                req.write(JSON.stringify(user))\r\n            }\r\n            req.end()\r\n        })\r\n    }\r\n}*/"]}]}