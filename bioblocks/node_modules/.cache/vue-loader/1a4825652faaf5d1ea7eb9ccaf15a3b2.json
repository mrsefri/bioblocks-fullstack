{"remainingRequest":"C:\\Users\\noest\\Desktop\\fullstack\\bioblocks\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\noest\\Desktop\\fullstack\\bioblocks\\src\\components\\NewProject.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\noest\\Desktop\\fullstack\\bioblocks\\src\\components\\NewProject.vue","mtime":1555865420388},{"path":"C:\\Users\\noest\\Desktop\\fullstack\\bioblocks\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\noest\\Desktop\\fullstack\\bioblocks\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\Users\\noest\\Desktop\\fullstack\\bioblocks\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\noest\\Desktop\\fullstack\\bioblocks\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\nimport { APIService } from \"../APIService\";\r\nconst apiService = new APIService();\r\n\r\nexport default {\r\n  name: \"newproject\",\r\n  checkbox: false,\r\n  data() {\r\n    return {\r\n      ruleForm1: {\r\n        project_name: \"\",\r\n        public: \"\",\r\n        xml_file: \"\"\r\n      },\r\n      namesRules: {\r\n        project_name: [\r\n          {\r\n            required: true,\r\n            message: \"Name is required\",\r\n            trigger: \"blur\"\r\n          }\r\n        ]\r\n      }\r\n    };\r\n  },\r\n  mounted() {\r\n    if (this.$route.params.xml_file != undefined) {\r\n      this.ruleForm1.xml_file = this.$route.params.xml_file;\r\n    }\r\n  },\r\n  methods: {\r\n    create(formName) {\r\n      this.$refs[formName].validate(valid => {\r\n        if (valid) {\r\n          var info = {\r\n            project_name: this.ruleForm1.project_name,\r\n            public: this.ruleForm1.public,\r\n            xml_file: this.ruleForm1.xml_file\r\n          };\r\n          apiService.newProject(info).then(result => {\r\n            if (result.data.success) {\r\n              this.$router.push({\r\n                name: \"project\",\r\n                params: { id: result.data.uri }\r\n              });\r\n            }\r\n          });\r\n        }\r\n      });\r\n    }\r\n  }\r\n};\r\n",{"version":3,"sources":["NewProject.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4BA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"NewProject.vue","sourceRoot":"src/components","sourcesContent":["<template>\r\n  <v-app class=\"appContainer\">\r\n    <el-form\r\n      class=\"newform\"\r\n      :model=\"ruleForm1\"\r\n      :rules=\"namesRules\"\r\n      ref=\"ruleForm1\"\r\n      lazy-validation\r\n      style=\"margin-top:10%;\"\r\n    >\r\n      <el-form-item prop=\"project_name\">\r\n        <el-input\r\n          v-model=\"ruleForm1.project_name\"\r\n          placeholder=\"Name of the project\"\r\n          @keyup.enter.native=\"create('ruleForm1')\"\r\n        ></el-input>\r\n      </el-form-item>\r\n      <el-form-item>\r\n        <el-checkbox v-model=\"ruleForm1.public\" label=\"Public project\" name=\"type\"></el-checkbox>\r\n      </el-form-item>\r\n      <el-form-item>\r\n        <el-button class=\"successB\" @click=\"create('ruleForm1')\">Create project</el-button>\r\n      </el-form-item>\r\n    </el-form>\r\n  </v-app>\r\n</template>\r\n\r\n<script>\r\nimport { APIService } from \"../APIService\";\r\nconst apiService = new APIService();\r\n\r\nexport default {\r\n  name: \"newproject\",\r\n  checkbox: false,\r\n  data() {\r\n    return {\r\n      ruleForm1: {\r\n        project_name: \"\",\r\n        public: \"\",\r\n        xml_file: \"\"\r\n      },\r\n      namesRules: {\r\n        project_name: [\r\n          {\r\n            required: true,\r\n            message: \"Name is required\",\r\n            trigger: \"blur\"\r\n          }\r\n        ]\r\n      }\r\n    };\r\n  },\r\n  mounted() {\r\n    if (this.$route.params.xml_file != undefined) {\r\n      this.ruleForm1.xml_file = this.$route.params.xml_file;\r\n    }\r\n  },\r\n  methods: {\r\n    create(formName) {\r\n      this.$refs[formName].validate(valid => {\r\n        if (valid) {\r\n          var info = {\r\n            project_name: this.ruleForm1.project_name,\r\n            public: this.ruleForm1.public,\r\n            xml_file: this.ruleForm1.xml_file\r\n          };\r\n          apiService.newProject(info).then(result => {\r\n            if (result.data.success) {\r\n              this.$router.push({\r\n                name: \"project\",\r\n                params: { id: result.data.uri }\r\n              });\r\n            }\r\n          });\r\n        }\r\n      });\r\n    }\r\n  }\r\n};\r\n</script>\r\n"]}]}