{"remainingRequest":"C:\\Users\\noest\\Desktop\\fullstack\\bioblocks\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\noest\\Desktop\\fullstack\\bioblocks\\src\\components\\Bioblocks.vue?vue&type=style&index=0&lang=css&","dependencies":[{"path":"C:\\Users\\noest\\Desktop\\fullstack\\bioblocks\\src\\components\\Bioblocks.vue","mtime":1557587742078},{"path":"C:\\Users\\noest\\Desktop\\fullstack\\bioblocks\\node_modules\\css-loader\\index.js","mtime":499162500000},{"path":"C:\\Users\\noest\\Desktop\\fullstack\\bioblocks\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":499162500000},{"path":"C:\\Users\\noest\\Desktop\\fullstack\\bioblocks\\node_modules\\postcss-loader\\src\\index.js","mtime":499162500000},{"path":"C:\\Users\\noest\\Desktop\\fullstack\\bioblocks\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\noest\\Desktop\\fullstack\\bioblocks\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\r\n.bioblocks {\r\n  height: 80%;\r\n  width: 100%;\r\n}\r\n\r\n#bioblocks-editor,\r\n#bioblocks-hardware {\r\n  height: 100%;\r\n  width: 100%;\r\n}\r\n\r\n#bioblocks-editor iframe {\r\n  border: none;\r\n}\r\n\r\n.el-switch {\r\n  display: block;\r\n  height: 25px;\r\n  width: 30%;\r\n  margin: 0 auto;\r\n}\r\n\r\n.el-switch__label {\r\n  color: black;\r\n}\r\n\r\n.el-switch__label > span {\r\n  font-size: 1.4em !important;\r\n}\r\n\r\n.el-switch__label.is-active {\r\n  color: #4caf50;\r\n}\r\n\r\ncanvas {\r\n  height: 90%;\r\n  width: 100%;\r\n}\r\n\r\n.list-elements {\r\n  display: flex;\r\n  list-style: none;\r\n  margin-left: 3%;\r\n  padding-top: 0.4em;\r\n  padding-bottom: 0.4em;\r\n  font-size: 0.875em;\r\n  background-color: white;\r\n  color: black;\r\n}\r\n",{"version":3,"sources":["Bioblocks.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwaA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Bioblocks.vue","sourceRoot":"src/components","sourcesContent":["<template>\r\n  <div class=\"bioblocks\">\r\n    <div style=\"font-size: 22px;\">\r\n      <ui class=\"list-elements\">\r\n        <li style=\"margin-right: 3em;\">\r\n          <v-menu :nudge-width=\"100\" offset-y>\r\n            <template v-slot:activator=\"{ on }\">\r\n              <v-toolbar-title v-on=\"on\" style=\"cursor: pointer; font-size: 0.875em;\">File</v-toolbar-title>\r\n            </template>\r\n            <v-list v-if=\"this.isOwner\">\r\n              <v-list-tile @click=\"save()\">\r\n                <v-list-tile-title>\r\n                  <v-icon small>cloud_upload</v-icon> Save\r\n                </v-list-tile-title>\r\n              </v-list-tile>\r\n              <v-divider></v-divider>\r\n              <v-list-tile @click=\"methodEdit()\">\r\n                <v-list-tile-title>\r\n                  <v-icon small>build</v-icon> Settings\r\n                </v-list-tile-title>\r\n              </v-list-tile>\r\n            </v-list>\r\n            <v-list v-if=\"!this.isOwner\">\r\n              <v-list-tile @click=\"clone()\">\r\n                <v-list-tile-title>\r\n                  <v-icon small>cloud_upload</v-icon> Clone\r\n                </v-list-tile-title>\r\n              </v-list-tile>\r\n            </v-list>\r\n          </v-menu>\r\n        </li>\r\n        <li style=\"margin-right: 3em;\" v-if=\"this.isOwner\">\r\n          <v-menu :nudge-width=\"100\" offset-y>\r\n            <template v-slot:activator=\"{ on }\">\r\n              <v-toolbar-title v-on=\"on\" style=\"cursor: pointer; font-size: 0.875em;\">Share</v-toolbar-title>\r\n            </template>\r\n            <v-list>\r\n              <v-list-tile @click=\"voidF()\">\r\n                <v-list-tile-title>\r\n                  <v-dialog v-model=\"dialog\" width=\"300\">\r\n                    <template v-slot:activator=\"{ on }\">\r\n                      <div v-on=\"on\">\r\n                        <v-icon small>folder_shared</v-icon> Add user\r\n                      </div>\r\n                    </template>\r\n                    <v-card style=\"height:220px;\">\r\n                      <el-form\r\n                        class=\"newform\"\r\n                        :model=\"ruleForm1\"\r\n                        :rules=\"namesRules\"\r\n                        ref=\"ruleForm1\"\r\n                        v-model=\"valid\"\r\n                        lazy-validation\r\n                        style=\"height: 200px;\"\r\n                      >\r\n                        <v-text-field\r\n                          color=\"green\"\r\n                          v-model=\"ruleForm1.id_user\"\r\n                          :counter=\"15\"\r\n                          label=\"Username\"\r\n                          required\r\n                          style=\"margin-top:50%;\"\r\n                        ></v-text-field>\r\n                        <el-button class=\"successB\"\r\n                          @click=\"addUser('ruleForm1')\"\r\n                          color=\"green\"\r\n                          :disabled=\"!valid\"\r\n                          style=\"margin-top:10%;\"\r\n                        >Add user</el-button>\r\n                      </el-form>\r\n                    </v-card>\r\n                  </v-dialog>\r\n                </v-list-tile-title>\r\n              </v-list-tile>\r\n            </v-list>\r\n          </v-menu>\r\n        </li>\r\n      </ui>\r\n    </div>\r\n    <v-divider></v-divider>\r\n    <el-switch\r\n      v-model=\"viewExperiment\"\r\n      active-color=\"#13ce66\"\r\n      inactive-color=\"#dcdfe6\"\r\n      active-text=\"Experimento\"\r\n      inactive-text=\"Hardware\"\r\n      style=\"padding-top: 0.4em; padding-bottom: 0.4em;\"\r\n    ></el-switch>\r\n    <!-- v-show over v-if here is important (v-if just reloads the iframe all the time) -->\r\n    <div\r\n      id=\"bioblocks-editor\"\r\n      v-show=\"viewExperiment\"\r\n      v-loading=\"experimentLoading\"\r\n      style=\"width: 95%; margin: 0 auto;\"\r\n    ></div>\r\n    <div id=\"bioblocks-hardware\" v-show=\"!viewExperiment\" style=\"width: 95%; margin: 0 auto;\"></div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport paper from \"paper\";\r\nimport { APIService } from \"../APIService\";\r\nconst apiService = new APIService();\r\n\r\n// Pin location in the Arduino image\r\nlet pins = [\r\n  { name: \"A0\", x: 213, y: 188, type: \"analog\" },\r\n  { name: \"A1\", x: 222, y: 188, type: \"analog\" },\r\n  { name: \"A2\", x: 232, y: 188, type: \"analog\" },\r\n  { name: \"A3\", x: 241, y: 188, type: \"analog\" },\r\n  { name: \"A4\", x: 251, y: 188, type: \"analog\" },\r\n  { name: \"A5\", x: 260, y: 188, type: \"analog\" },\r\n  { name: \"A6\", x: 270, y: 188, type: \"analog\" },\r\n  { name: \"A7\", x: 279, y: 188, type: \"analog\" },\r\n  { name: \"A8\", x: 300, y: 188, type: \"analog\" },\r\n  { name: \"A9\", x: 309, y: 188, type: \"analog\" },\r\n  { name: \"A10\", x: 318, y: 188, type: \"analog\" },\r\n  { name: \"A11\", x: 328, y: 188, type: \"analog\" },\r\n  { name: \"A12\", x: 337, y: 188, type: \"analog\" },\r\n  { name: \"A13\", x: 346, y: 188, type: \"analog\" },\r\n  { name: \"A14\", x: 356, y: 188, type: \"analog\" },\r\n  { name: \"A15\", x: 365, y: 188, type: \"analog\" },\r\n\r\n  { name: \"D13\", x: 132, y: 7, type: \"digital\" },\r\n  { name: \"D12\", x: 141, y: 7, type: \"digital\" },\r\n  { name: \"D11\", x: 151, y: 7, type: \"digital\" },\r\n  { name: \"D10\", x: 160, y: 7, type: \"digital\" },\r\n  { name: \"D9\", x: 169, y: 7, type: \"digital\" },\r\n  { name: \"D8\", x: 179, y: 7, type: \"digital\" },\r\n  { name: \"D7\", x: 194, y: 7, type: \"digital\" },\r\n  { name: \"D6\", x: 204, y: 7, type: \"digital\" },\r\n  { name: \"D5\", x: 214, y: 7, type: \"digital\" },\r\n  { name: \"D4\", x: 223, y: 7, type: \"digital\" },\r\n  { name: \"D3\", x: 233, y: 7, type: \"digital\" },\r\n  { name: \"D2\", x: 242, y: 7, type: \"digital\" },\r\n  { name: \"D1\", x: 252, y: 7, type: \"digital\" },\r\n  { name: \"D0\", x: 261, y: 7, type: \"digital\" }\r\n];\r\n\r\nlet hwPaperComponents = []; // List of paper.js rendered components (so we can rerender)\r\nfunction getPinPoint(name) {\r\n  let pin = pins.find(val => {\r\n    return val.name == name;\r\n  });\r\n\r\n  if (!pin) {\r\n    console.warn(\"Warning: Pin not found by name %s\", name);\r\n    return new Point(0, 0);\r\n  }\r\n\r\n  return new Point(pin.x, pin.y).add(raster.bounds.topLeft).add(new Size(3, 3));\r\n}\r\n\r\n/**\r\n * connectToPin links a rectangle and a pin by its name\r\n */\r\nfunction connectToPin(rect, pin) {\r\n  var pathToPin = new Path();\r\n  pathToPin.strokeColor = \"black\";\r\n  pathToPin.add(rect.bounds.bottomCenter);\r\n  pathToPin.add(getPinPoint(pin));\r\n  pathToPin.remove(); // Only add it after we add it to group\r\n\r\n  return pathToPin;\r\n}\r\n\r\nexport default {\r\n  name: \"todo-bio\",\r\n  props: [\"methodSave\", \"methodAdd\", \"dataxml\", \"methodEdit\", \"isOwner\"],\r\n  data() {\r\n    return {\r\n      viewExperiment: true,\r\n      experimentLoading: true,\r\n      canvasReady: false, // Whether or not the canvas has been rendered on-screen once\r\n      experimentWorkspaceBlocks: {}, // Set of blocks and connections currently on the experiment\r\n      dialog: false,\r\n      valid: true,\r\n      namesRules: {\r\n        id_user: [v => !!v || \"Id is required\"]\r\n      },\r\n      ruleForm1: {\r\n        id_user: \"\"\r\n      }\r\n    };\r\n  },\r\n  mounted() {\r\n    paper.install(window);\r\n\r\n    // Get a reference to the canvas object\r\n    let canvas = document.getElementById(\"myCanvas\");\r\n    // Create an empty project and a view for the canvas:\r\n    paper.setup(canvas);\r\n\r\n    // [Blockly is served at port 9000]\r\n    const remoteOrigin =\r\n      window.location.protocol + \"//\" + window.location.hostname + \":9000\";\r\n\r\n    // Prepare communication with iframe\r\n    let pthis = this;\r\n    window.addEventListener(\r\n      \"message\",\r\n      function(event) {\r\n        if (event.origin != remoteOrigin) {\r\n          console.warn(\"Discarding postMessage from origin %s\", event.origin);\r\n          return;\r\n        }\r\n        pthis.onWorkspaceEvent(event);\r\n      },\r\n      false\r\n    );\r\n\r\n    // Create the blockly iframe\r\n    var iframe = document.createElement(\"iframe\");\r\n    iframe.setAttribute(\r\n      \"src\",\r\n      remoteOrigin + \"/pxt-blockly/workspace.html?parent=\" + window.location\r\n    );\r\n    iframe.setAttribute(\"id\", \"frame\");\r\n    iframe.style.width = \"100%\";\r\n    iframe.style.height = \"100%\";\r\n    iframe.setAttribute(\"sandbox\", \"allow-scripts allow-same-origin\");\r\n    iframe.onload = () => {\r\n      this.experimentLoading = false;\r\n    };\r\n\r\n    document.getElementById(\"bioblocks-editor\").appendChild(iframe);\r\n  },\r\n  methods: {\r\n    prepareCanvas() {\r\n      const paper = window.paper;\r\n      const view = window.view; // Gets set up by paper\r\n\r\n      var myImage = new Image(1014, 500);\r\n      myImage.src = \"/img/arduino_mega_clean.png\";\r\n\r\n      // Create a raster item using the image & put it on the center\r\n      let raster = new paper.Raster({\r\n        image: myImage,\r\n        smoothing: true\r\n      });\r\n      raster.position = view.center;\r\n      raster.scale(0.4);\r\n\r\n      // Pin location\r\n      window.raster = raster;\r\n\r\n      for (let pin of pins) {\r\n        var topLeft = new paper.Point(pin.x, pin.y);\r\n        var rectSize = new paper.Size(4, 4);\r\n        var rect = new paper.Rectangle(\r\n          topLeft.add(raster.bounds.topLeft),\r\n          rectSize\r\n        );\r\n        var shape = new paper.Shape.Rectangle(rect);\r\n        shape.strokeColor = \"white\";\r\n        if (pin.type == \"analog\") {\r\n          shape.fillColor = \"green\";\r\n        } else if (pin.type == \"digital\") {\r\n          shape.fillColor = \"red\";\r\n        }\r\n\r\n        raster.addChild(rect);\r\n      }\r\n\r\n      // Mark as ready\r\n      this.canvasReady = true;\r\n      paper.view.draw();\r\n    },\r\n\r\n    makeRectangle(topLeft, size, cornerSize, colour) {\r\n      var rectangle = new Rectangle(topLeft, size);\r\n      var cornerSize = cornerSize;\r\n      var path = new Path.RoundRectangle(rectangle, cornerSize);\r\n      path.fillColor = colour;\r\n      return path;\r\n    },\r\n\r\n    onWorkspaceEvent(event) {\r\n      if (event.data && event.data.type == \"workspace_hw_status\") {\r\n        this.experimentWorkspaceBlocks = event.data.hw;\r\n      } else if (event.data.type == \"save\") {\r\n        var info = {\r\n          id_project: \"\",\r\n          xml_file: event.data.xml\r\n        };\r\n        this.methodSave(info);\r\n      } else if (event.data.type === \"load\") {\r\n        var frame = document.getElementById(\"frame\");\r\n        frame.contentWindow.postMessage(\r\n          {\r\n            type: \"load\",\r\n            xml: this.dataxml\r\n          },\r\n          \"*\"\r\n        );\r\n      }\r\n    },\r\n\r\n    save() {\r\n      var frame = document.getElementById(\"frame\");\r\n      frame.contentWindow.postMessage(\r\n        {\r\n          type: \"save\"\r\n        },\r\n        \"*\"\r\n      );\r\n    },\r\n\r\n    clone() {\r\n      this.$router.push({\r\n        name: \"newproject\",\r\n        params: { xml_file: this.dataxml }\r\n      });\r\n    },\r\n\r\n    voidF() {},\r\n\r\n    addUser(formName) {\r\n      this.$refs[formName].validate(valid => {\r\n        if (valid) {\r\n          var info = {\r\n            id_user: this.ruleForm1.id_user,\r\n            id_project: \"\"\r\n          };\r\n          this.methodAdd(info);\r\n        }\r\n      });\r\n    },\r\n\r\n    renderComponents() {\r\n      // Clean up the components first\r\n      for (let component in hwPaperComponents) {\r\n        hwPaperComponents[component].removeChildren();\r\n        hwPaperComponents[component].remove();\r\n      }\r\n\r\n      hwPaperComponents = [];\r\n      let rectCount = 0;\r\n      for (let key in this.experimentWorkspaceBlocks) {        \r\n        let blockInfo = this.experimentWorkspaceBlocks[key];\r\n        let componentName;\r\n\r\n        switch (blockInfo.type) {\r\n          case \"new_centrifuge\":\r\n            componentName = \"CENTRIFUGE\";\r\n            break;\r\n          default:\r\n            // TODO: Have the block supply its own name, instead of this hardcoded list\r\n            componentName = \"????\";\r\n            break;\r\n        }\r\n\r\n        rectCount++;\r\n\r\n        // Create the hw rectangle\r\n        var xy1 = view.center.subtract(new Size(0, 150 + 100 * rectCount)); //Position of the rectangle.\r\n        var size = new Size(100, 80); //Size\r\n        var c = new Size(8, 8); //Corner radius\r\n        var col = \"#167ee5\"; //Colour\r\n\r\n        let g = new Group();\r\n        let rect = this.makeRectangle(xy1, size, c, col);\r\n        var text = new PointText(rect.bounds.topLeft.add(new Point(10, 45)));\r\n        text.content = componentName;\r\n        text.style = {\r\n          fillColor: \"white\"\r\n        };\r\n        g.addChild(rect);\r\n        g.addChild(text);\r\n\r\n        for (let n in blockInfo.connections.analog) {\r\n          let pin = blockInfo.connections.analog[n];\r\n\r\n          if (pin) {\r\n            g.addChild(connectToPin(rect, pin));\r\n          }\r\n        }\r\n\r\n        for (let n in blockInfo.connections.digital) {\r\n          let pin = blockInfo.connections.digital[n];\r\n\r\n          if (pin) {\r\n            g.addChild(connectToPin(rect, pin));\r\n          }\r\n        }\r\n\r\n        hwPaperComponents.push(g); // Add the group of elements to the list\r\n      }\r\n    }\r\n  },\r\n  watch: {\r\n    viewExperiment(newVal, oldVal) {\r\n      if (!newVal) {\r\n        // Redraw the canvas with the correct width to remove artifacting\r\n        // The timeout works around some... browser processing? Without it,\r\n        // both properties return 0 (as does the bounding box)\r\n\r\n        setTimeout(() => {\r\n          if (!this.canvasReady) {\r\n            // Dynamically create a canvas. A canvas created out of render view\r\n            // doesn't properly work\r\n            let canvasParent = document.getElementById(\"bioblocks-hardware\");\r\n            let canvasEle = document.createElement(\"canvas\");\r\n            canvasEle.id = \"myCanvas\";\r\n            canvasEle.setAttribute(\"resize\", true);\r\n\r\n            canvasParent.appendChild(canvasEle);\r\n            paper.setup(canvasEle);\r\n            this.prepareCanvas();\r\n\r\n            const width = canvasParent.offsetWidth;\r\n            const height = canvasParent.offsetHeight;\r\n            paper.view.viewSize = new paper.Size(width, height);\r\n          }\r\n\r\n          this.renderComponents();\r\n        }, 100);\r\n      }\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<style>\r\n.bioblocks {\r\n  height: 80%;\r\n  width: 100%;\r\n}\r\n\r\n#bioblocks-editor,\r\n#bioblocks-hardware {\r\n  height: 100%;\r\n  width: 100%;\r\n}\r\n\r\n#bioblocks-editor iframe {\r\n  border: none;\r\n}\r\n\r\n.el-switch {\r\n  display: block;\r\n  height: 25px;\r\n  width: 30%;\r\n  margin: 0 auto;\r\n}\r\n\r\n.el-switch__label {\r\n  color: black;\r\n}\r\n\r\n.el-switch__label > span {\r\n  font-size: 1.4em !important;\r\n}\r\n\r\n.el-switch__label.is-active {\r\n  color: #4caf50;\r\n}\r\n\r\ncanvas {\r\n  height: 90%;\r\n  width: 100%;\r\n}\r\n\r\n.list-elements {\r\n  display: flex;\r\n  list-style: none;\r\n  margin-left: 3%;\r\n  padding-top: 0.4em;\r\n  padding-bottom: 0.4em;\r\n  font-size: 0.875em;\r\n  background-color: white;\r\n  color: black;\r\n}\r\n</style>\r\n"]}]}